name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  DATABASE_URI: ${{ secrets.PROD_DATABASE_URI }} 
  AWS_REGION: ${{ secrets.AWS_REGION }}         
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ECR_REPOSITORY: notes-todo-repository
  ECS_SERVICE: notes-todo-service
  ECS_CLUSTER: notes-todo-cluster
  ECS_TASK_DEFINITION: notes-todo-task
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: notes-todo-task	  # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
jobs:
 
  build_and_push:
    name: Bild API docker image
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'
    - run: npm install
    - run: npm run build --if-present
    - run: npm test

    - name: Configure AWS credentials
      if: success()
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: success()
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      if: success()
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "DATABASE_URI=$DATABASE_URI" >> .env

        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      if: success()
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./aws/notes-todo-task.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      if: success()
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        force-new-deployment: true
